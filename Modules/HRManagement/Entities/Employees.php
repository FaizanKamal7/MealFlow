<?php

namespace Modules\HRManagement\Entities;


use App\Http\Helper\Helper;
use App\Models\User;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\Request;
use Modules\CRM\Entities\Leads;
use Modules\FleetService\Entities\Driver;
use Modules\HRManagement\Database\factories\EmployeesFactory;


class Employees extends Model
{
    use HasFactory;
    use HasUuids;
    protected $fillable = [
        "first_name",
        "last_name",
        "company_email_address",
        "personal_email_address",
        "company_phone_number",
        "personal_phone_number",
        "picture",
        "city",
        "country",
        "marital_status",
        "hire_date",
        "probation_period_start",
        "probation_period_end",
        "status",

        "employee_type",
        "contract_start_date",
        "contract_end_date",
        "duty_start_time",
        "duty_end_time",

        "user_id",
        "designation_id",
        "leave_policy_id",
    ];



    public function employeeDepartments()
    {
        return $this->hasMany(EmployeeDepartments::class, "employee_id");
    }

    public function employeeSalary()
    {
        return $this->hasOne(EmployeeSalary::class, "employee_id");
    }

    public function employeeMedia()
    {
        return $this->hasMany(EmployeeMedia::class, "employee_id");
    }

    public function employeeBank()
    {
        return $this->hasOne(Banks::class, "employee_id");
    }

    public function employeeAppreciation()
    {
        return $this->hasMany(Appreciation::class, "employee_id");
    }

    public function employeeAttendance()
    {
        return $this->hasMany(Attendance::class, "employee_id");
    }

    public function employeeDeductions()
    {
        return $this->hasMany(Deductions::class, "employee_id");
    }

    public function employeePayroll()
    {
        return $this->hasMany(Payroll::class, "employee_id");
    }
    public function employeeTimesheets()
    {
        return $this->hasMany(Timesheets::class, "employee_id");
    }

    public function employeeExpenseReclaims()
    {
        return $this->hasMany(ExpenseReclaims::class, "employee_id");
    }

    public function employeeTeams()
    {
        return $this->hasMany(TeamMembers::class, "employee_id");
    }

    public function employeeLeaveApplications()
    {
        return $this->hasMany(LeaveApplications::class, "employee_id");
    }

    public function designation()
    {
        return $this->belongsTo(Designations::class);
    }

    public function leavePolicy()
    {
        return $this->belongsTo(LeavePolicy::class);
    }

    public function assignedLeads()
    {
        return $this->hasMany(Leads::class, "staff_id");
    }

    public function driver()
    {
        return $this->hasOne(Driver::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }
    protected static function newFactory()
    {
        return EmployeesFactory::new();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "HRM";
            $action = "Created";
            $subject = "New Record Created";
            $url = Request::fullUrl();
            $description = "A New Record has been created";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = null;
            $new_values = json_encode(json_encode($model->getAttributes()));
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();

            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });

        static::updating(function ($model) {
            $changes = $model->getDirty();

            if ($changes) {
                $helper = new Helper();
                $user_id = auth()->id();
                $module_name = "HRM";
                $action = "Updated";
                $subject = "Record Updated";
                $url = Request::fullUrl();
                $description = "Record has been updated";
                $ip_address = Request::ip();
                $user_agent = Request::header('user-agent');
                $old_values = json_encode(json_encode($model->getOriginal()));
                $new_values = json_encode($model->getAttributes());
                $record_id = $model->id;
                $record_type = get_class($model);
                $method = Request::method();

                $helper->logActivity(
                    userId: $user_id,
                    moduleName: $module_name,
                    action: $action,
                    subject: $subject,
                    url: $url,
                    description: $description,
                    ipAddress: $ip_address,
                    userAgent: $user_agent,
                    oldValues: $old_values,
                    newValues: $new_values,
                    recordId: $record_id,
                    recordType: $record_type,
                    method: $method
                );
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "HRM";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values =  json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });

        //        static::retrieved(function ($model) {
        //            $helper = new Helper();
        //            $user_id = auth()->id();
        //            $module_name = "HRM";
        //            $action = "Retrieved";
        //            $subject = "Record Retrieved";
        //            $url = Request::fullUrl();
        //            $description = "Record has been retrieved";
        //            $ip_address = Request::ip();
        //            $user_agent = Request::header('user-agent');
        //            $old_values =  json_encode($model->getOriginal());
        //            $new_values = json_encode($model->getAttributes());
        //            $record_id = $model->id;
        //            $record_type = get_class($model);
        //            $method = Request::method();
        //
        //            $helper->logActivity(userId:$user_id, moduleName: $module_name, action: $action, subject: $subject,
        //                url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
        //                oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
        //                method: $method);
        //        });
    }
}
