<?php

namespace Modules\FleetService\Entities;

use App\Http\Helper\Helper;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Request;
use Modules\FleetService\Entities\VehicleType;
use Modules\FleetService\Entities\VehicleModel;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Factories\HasFactory;


class Vehicle extends Model
{
    use HasFactory;
    use SoftDeletes;
    use HasUuids;
    protected $fillable = [

        'api_unit_id',
        'registration_number',
        'vehicle_picture',
        'engine_number',
        'chassis_number',
        'vehicle_model_id',
        'year',
        'color',
        'qr_code',
        'insurance_picture',
        'insurance_issue_date',
        'insurance_expiry_date',
        'municipality_picture',
        'municipality_issue_date',
        'municipality_expiry_date',
        'Registration_picture',
        'Registration_issue_date',
        'Registration_expiry_date',
        'active_status',
        'mileage',
        'vehicle_type_id',
    ];

    protected static function newFactory()
    {
        return \Modules\FleetService\Database\factories\VehicleFactory::new();
    }

    public function vehicleType()
    {
        return $this->belongsTo(VehicleType::class, 'vehicle_type_id');
    }
    public function vehicleModel()
    {
        return $this->belongsTo(VehicleModel::class, 'vehicle_model_id');
    }
    public function timelines()
    {
        return $this->hasMany(VehicleTimeline::class)->orderBy('check_in_time', 'asc');

    }
    public function lastIncompleteTimeline()
    {
        return $this->hasOne(VehicleTimeline::class)
            ->orderBy('created_at', 'desc')
            ->whereNull('check_out_time');
    }
    
    public static function getByCriteria($field, $value)
    {
        return self::where($field, $value)->first();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "FleetService";
            $action = "Created";
            $subject = "New Record Created";
            $url = Request::fullUrl();
            $description = "A New Record has been created";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = null;
            $new_values = json_encode(json_encode($model->getAttributes()));
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();

            $helper->logActivity(
                userId: $user_id, moduleName: $module_name, action: $action, subject: $subject,
                url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
                oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
                method: $method
            );
        });

        static::updating(function ($model) {
            $changes = $model->getDirty();

            if ($changes) {
                $helper = new Helper();
                $user_id = auth()->id();
                $module_name = "FleetService";
                $action = "Updated";
                $subject = "Record Updated";
                $url = Request::fullUrl();
                $description = "Record has been updated";
                $ip_address = Request::ip();
                $user_agent = Request::header('user-agent');
                $old_values = json_encode(json_encode($model->getOriginal()));
                $new_values = json_encode($model->getAttributes());
                $record_id = $model->id;
                $record_type = get_class($model);
                $method = Request::method();

                $helper->logActivity(
                    userId: $user_id, moduleName: $module_name, action: $action, subject: $subject,
                    url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
                    oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
                    method: $method
                );
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "FleetService";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id, moduleName: $module_name, action: $action, subject: $subject,
                url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
                oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
                method: $method
            );

        });

    }
}