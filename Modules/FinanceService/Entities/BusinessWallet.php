<?php

namespace Modules\FinanceService\Entities;

use App\Enum\BusinessWalletTransactionTypeEnum;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Request;
use App\Http\Helper\Helper;
use Modules\BusinessService\Entities\Business;

class BusinessWallet extends Model
{
    use HasFactory;
    use HasUuids;
    use SoftDeletes;

    protected $fillable = [
        'balance',
        'business_id',
    ];

    public function businessWalletTransactions()
    {
        return $this->hasMany(BusinessWalletTransaction::class);
    }
    public function business()
    {
        return $this->belongsTo(Business::class);
    }

    public function cards()
    {
        return $this->hasMany(BusinessCard::class);
    }



    protected static function newFactory()
    {
        return \Modules\FinanceService\Database\factories\BusinessWalletFactory::new();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub


        static::updating(function ($model) {
            $changes = $model->getDirty();

            if ($changes) {
                $helper = new Helper();
                $user_id = auth()->id();
                $module_name = "FinanceService";
                $action = "Updated";
                $subject = "Record Updated";
                $url = Request::fullUrl();
                $description = "Record has been updated";
                $ip_address = Request::ip();
                $user_agent = Request::header('user-agent');
                $old_values = json_encode(json_encode($model->getOriginal()));
                $new_values = json_encode($model->getAttributes());
                $record_id = $model->id;
                $record_type = get_class($model);
                $method = Request::method();

                $helper->logActivity(
                    userId: $user_id,
                    moduleName: $module_name,
                    action: $action,
                    subject: $subject,
                    url: $url,
                    description: $description,
                    ipAddress: $ip_address,
                    userAgent: $user_agent,
                    oldValues: $old_values,
                    newValues: $new_values,
                    recordId: $record_id,
                    recordType: $record_type,
                    method: $method
                );
                // Check if 'balance' attribute is being updated
                // if ($model->isDirty('balance')) {
                //     $oldBalance = $model->getOriginal('balance');
                //     $newBalance = $model->getAttribute('balance');

                //     $amount = $newBalance - $oldBalance;
                //     $attributes = $model->getAttributes();
                //     $wallet_id = $attributes['id'];
                //     dd($attributes);
                //     // Compare old balance with new balance
                //     if ($newBalance > $oldBalance) {
                //         $helper->businessWalletTransactions($amount, BusinessWalletTransactionTypeEnum::CREDIT, $wallet_id, $payment_method_id = null, $card_id = null);
                //     } else {
                //         $helper->businessWalletTransactions($amount, BusinessWalletTransactionTypeEnum::DEBIT, $wallet_id, $invoice_item_id  = null);
                //     }
                // }
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "FinanceService";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });
    }
}
