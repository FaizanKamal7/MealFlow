<?php

namespace Modules\DeliveryService\Entities;

use App\Http\Helper\Helper;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\Request;
use Modules\BusinessService\Entities\Business;

class Bag extends Model
{
    use HasFactory;
    use HasUuids;
    protected $fillable = [
        "business_id",
        "qr_code",
        "bag_number",
        "bag_size",
        //small,medium,large or capacity (5 ltr, 10 ltr)
        "bag_type",
        // Cooler bag, paperbag,
        "status",
        //in transit, delivered, in wearhouse
        "weight",
        "dimensions", //length x width x height

        "business_id"
    ];
    protected $delivery_id;
    protected $vehicle_id;

    /**
     * Summary of newFactory
     * @return mixed
     */
    protected static function newFactory()
    {
        return \Modules\DeliveryService\Database\factories\BagsFactory::new();
    }
    
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $attributes = $model->getAttributes();
            $helper = new Helper();
            $action_by = auth()->id();
            $bag_id = $attributes['id'];
            $delivery_id = null;
            $status = null;
            $vehicle_id = null;
            $description = "New bag added";
            $helper->bagTimeline($bag_id, $delivery_id, $status, $action_by, $vehicle_id, $description);



            $user_id = auth()->id();
            $module_name = "DeliveryService";
            $action = "Created";
            $subject = "New Record Created";
            $url = Request::fullUrl();
            $description = "A New Record has been created";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = null;
            $new_values = json_encode(json_encode($model->getAttributes()));
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();

            $helper->logActivity(
                userId: $user_id, moduleName: $module_name, action: $action, subject: $subject,
                url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
                oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
                method: $method
            );
        });

        static::updating(function ($model) {
            // $changes = $model->getDirty();

            if ($model->isDirty('status')) {
                $attributes = $model->getAttributes();
                $helper = new Helper();
                $action_by = auth()->id();
                $bag_id = $attributes['id'];
                $delivery_id = $model->getOriginal('delivery_id');
                $status = $attributes['status'];
                $vehicle_id = $model->getOriginal('vehicle_id');;
                $description = "status updated";
    
    
                $helper->bagTimeline($bag_id, $delivery_id, $status, $action_by, $vehicle_id, $description);
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "DeliveryService";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id, moduleName: $module_name, action: $action, subject: $subject,
                url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
                oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
                method: $method
            );

        });

    }

    public function bagTimeline()
    {
        return $this->hasMany(BagTimeline::class, "bag_id");
    }
    public function business()
    {
        return $this->belongsTo(Business::class);
    }
    public function delivery()
    {
        return $this->belongsTo(Delivery::class);
    }
}