<?php

namespace Modules\DeliveryService\Entities;

use App\Enum\BagStatusEnum;
use App\Http\Helper\Helper;
use Illuminate\Support\Facades\Request;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class DeliveryBag extends Model
{
    use HasFactory;
    use HasUuids;

    protected $fillable = [
        "bag_id",
        "delivery_id",
    ];

    public function bag()
    {
        return $this->belongsTo(Bag::class, 'bag_id');
    }

    public function delivery()
    {
        return $this->belongsTo(Delivery::class, 'delivery_id');
    }

    // Customize JSON Serialization to make sure below relationships are included whenever Customer is converted to an array or JSON
    public function toArray()
    {
        $array = parent::toArray();
        $array['delivery'] = $this->delivery->toArray();
        $array['bag'] = $this->bag->toArray();

        return $array;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $attributes = $model->getAttributes();
            $helper = new Helper();
            $action_by = auth()->id();
            $bag_id = $attributes['bag_id'];
            $delivery_id = $attributes['delivery_id'];
            $status =  BagStatusEnum::ATTACHED_TO_DELIVERY->value;
            $description = "Driver just picked the delivery bag from the partner";
            $vehicle_id = isset(Delivery::find($delivery_id)->pickupBatch->vehicle_id) ? Delivery::find($delivery_id)->pickupBatch->vehicle_id  : null;
            $helper->bagTimeline($bag_id, $delivery_id, $status, $action_by, $vehicle_id, $description);
        });

        static::updating(function ($model) {
            // $changes = $model->getDirty();

            if ($model->isDirty('status')) {
                $attributes = $model->getAttributes();
                $helper = new Helper();
                $action_by = auth()->id();
                $bag_id = $attributes['bag_id'];
                $delivery_id = $model->getOriginal('delivery_id');
                $status = $attributes['status'];
                $vehicle_id = $model->getOriginal('vehicle_id') ?? null;
                $description = "Delivery bag status updated";
                $helper->bagTimeline($bag_id, $delivery_id, $status, $action_by, $vehicle_id, $description);
            }
        });
    }

    protected static function newFactory()
    {
        return \Modules\DeliveryService\Database\factories\DeliveryBagFactory::new();
    }
}
