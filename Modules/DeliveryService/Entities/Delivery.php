<?php

namespace Modules\DeliveryService\Entities;

use App\Enum\BagStatusEnum;
use App\Enum\DeliveryStatusEnum;
use App\Models\DeliverySlot;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Modules\BusinessService\Entities\Branch;
use Modules\BusinessService\Entities\Customer;
use Modules\BusinessService\Entities\CustomerAddress;
use Illuminate\Support\Facades\Request;
use App\Http\Helper\Helper;
use Modules\DeliveryService\Interfaces\DeliveryBagInterface;
use Modules\DeliveryService\Repositories\DeliveryBagRepository;
use Modules\FinanceService\Entities\InvoiceItem;
use Modules\FleetService\Entities\Vehicle;

class Delivery extends Model
{
    use HasFactory;
    use HasUuids;
    protected $fillable = [
        "status",
        "qr_code",
        "is_recurring",
        "payment_status",
        "is_sign_required",
        "is_notification_enabled",
        "bag_type",
        "note",
        "delivery_date",
        "branch_id",
        "delivery_slot_id",
        "delivery_type_id",
        "customer_id",
        "customer_address_id",
        "pickup_batch_id",
        "delivery_batch_id",
        'empty_bag_count',
        'meal_plan_id'
    ];

    public function branch()
    {
        return $this->belongsTo(Branch::class, 'branch_id');
    }

    public function deliverySlot()
    {
        return $this->belongsTo(DeliverySlot::class, 'delivery_slot_id');
    }

    public function deliveryType()
    {
        return $this->belongsTo(DeliveryType::class, 'delivery_type_id');
    }

    public function customer()
    {
        return $this->belongsTo(Customer::class, 'customer_id');
    }

    public function customerAddress()
    {
        return $this->belongsTo(CustomerAddress::class, 'customer_address_id');
    }

    public function pickupBatch()
    {
        return $this->belongsTo(PickupBatch::class, 'pickup_batch_id');
    }

    public function deliveryBatch()
    {
        return $this->belongsTo(DeliveryBatch::class, 'delivery_batch_id');
    }

    public function vehicle()
    {
        return $this->belongsToThrough(Vehicle::class, DeliveryBatch::class);
    }

    public function deliveryBags()
    {
        return $this->hasMany(DeliveryBag::class);
    }

    public function invoiceItems()
    {
        return $this->morphMany(InvoiceItem::class, 'service');
    }

    public function deliveryTimelines()
    {
        return $this->hasMany(DeliveryTimeline::class);
    }

    public function bagTimelines()
    {
        return $this->hasMany(BagTimeline::class);
    }

    // Customize JSON Serialization to make sure below relationships are included whenever Customer is converted to an array or JSON
    public function toArray()
    {
        $array = parent::toArray();
        $array['branch'] = $this->branch->toArray();
        $array['customer'] = $this->customer->toArray();

        return $array;
    }


    protected static function newFactory()
    {
        return \Modules\DeliveryService\Database\factories\DeliveryFactory::new();
    }


    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $attributes = $model->getAttributes();
            $helper = new Helper();
            $action_by = $user_id = auth()->check() ? auth()->id() : null;
            $delivery_id = $attributes['id'];
            $status = DeliveryStatusEnum::UNASSIGNED->value;
            $vehicle_id = null;
            $description = "New Delivery added";

            $helper->deliveryTimeline($delivery_id, $status, $action_by, $vehicle_id, $description);

            $user_id = auth()->id();
            $module_name = "DeliveryService";
            $action = "Created";
            $subject = "New Record Created";
            $url = Request::fullUrl();
            $description = "A New Record has been created";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = null;
            $new_values = json_encode(json_encode($model->getAttributes()));
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();

            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });

        static::updating(function ($model) {
            $changes = $model->getDirty();
            if ($changes) {
                $helper = new Helper();
                $user_id = $user_id = auth()->check() ? auth()->id() : null;
                $module_name = "DeliveryService";
                $action = "updated";
                $subject = "Record updated";
                $url = Request::fullUrl();
                $description = "Record has been updated";
                $ip_address = Request::ip();
                $user_agent = Request::header('user-agent');
                $old_values = json_encode($model->getOriginal());
                $new_values = json_encode($model->getAttributes());
                $record_id = $model->id;
                $record_type = get_class($model);
                $method = Request::method();

                $helper->logActivity(
                    userId: $user_id,
                    moduleName: $module_name,
                    action: $action,
                    subject: $subject,
                    url: $url,
                    description: $description,
                    ipAddress: $ip_address,
                    userAgent: $user_agent,
                    oldValues: $old_values,
                    newValues: $new_values,
                    recordId: $record_id,
                    recordType: $record_type,
                    method: $method
                );
                if ($model->isDirty('status')) {
                    $attributes = $model->getAttributes();
                    $helper = new Helper();
                    $action_by = auth()->id();
                    $delivery_id = $attributes['id'];
                    $status = $model->getAttributes('status');
                    $vehicle_id = isset(Delivery::find($delivery_id)->deliveryBatch->vehicle) ? Delivery::find($delivery_id)->deliveryBatch->vehicle->id : null;

                    $helper->deliveryTimeline($delivery_id, DeliveryStatusEnum::ASSIGNED->value, $action_by, $vehicle_id, $description);

                    // Access the related vehicle using the vehicle (through) relationship

                    if ($status == DeliveryStatusEnum::ASSIGNED->value) {
                        $helper->deliveryTimeline($delivery_id, DeliveryStatusEnum::ASSIGNED->value, $action_by, $vehicle_id, $description);
                        $description = "Delivery assigned to the driver";
                    } elseif ($status == DeliveryStatusEnum::DELIVERED->value) {
                        $description = "Delivery Bag delivered at customer's location";
                        $bag = DeliveryBag::where('delivery_id', $delivery_id)->last();
                        $helper->bagTimeline($bag->id, $delivery_id, BagStatusEnum::DELIVERED->value, $action_by, $vehicle_id, $description);
                        $helper->deliveryTimeline($delivery_id, DeliveryStatusEnum::DELIVERED->value, $action_by, $vehicle_id, $description);
                    }
                }
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = $user_id = auth()->check() ? auth()->id() : null;
            $module_name = "DeliveryService";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });
    }
}
