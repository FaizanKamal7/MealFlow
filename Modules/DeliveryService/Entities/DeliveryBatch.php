<?php

namespace Modules\DeliveryService\Entities;

use App\Enum\BagStatusEnum;
use App\Enum\BatchStatusEnum;
use App\Enum\DeliveryStatusEnum;
use App\Http\Helper\Helper;
use Illuminate\Support\Facades\Request;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Modules\FleetService\Entities\Driver;
use Modules\FleetService\Entities\Vehicle;

class DeliveryBatch extends Model
{
    use HasFactory;
    use HasUuids;

    protected $fillable = [
        "batch_start_time",
        "batch_end_time",
        "batch_start_map_coordinates",
        "batch_end_map_coordinates",
        "status",
        "vehicle_id",
        "driver_id",
    ];

    public function vehicle()
    {
        return $this->belongsTo(Vehicle::class, 'vehicle_id');
    }

    public function driver()
    {
        return $this->belongsTo(Driver::class, 'driver_id');
    }
    public function deliveries()
    {
        return $this->hasMany(Delivery::class);
    }

    protected static function newFactory()
    {
        return \Modules\DeliveryService\Database\factories\DeliveryBatchFactory::new();
    }
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "DeliveryService";
            $action = "Created";
            $subject = "New Record Created";
            $url = Request::fullUrl();
            $description = "A New Record has been created";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = null;
            $new_values = json_encode(json_encode($model->getAttributes()));
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();

            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });

        static::updating(function ($model) {
            $changes = $model->getDirty();

            if ($changes) {
                $helper = new Helper();
                $user_id = auth()->id();
                $module_name = "DeliveryService";
                $action = "Updated";
                $subject = "Record Updated";
                $url = Request::fullUrl();
                $description = "Record has been updated";
                $ip_address = Request::ip();
                $user_agent = Request::header('user-agent');
                $old_values = json_encode(json_encode($model->getOriginal()));
                $new_values = json_encode($model->getAttributes());
                $record_id = $model->id;
                $record_type = get_class($model);
                $method = Request::method();

                $helper->logActivity(
                    userId: $user_id,
                    moduleName: $module_name,
                    action: $action,
                    subject: $subject,
                    url: $url,
                    description: $description,
                    ipAddress: $ip_address,
                    userAgent: $user_agent,
                    oldValues: $old_values,
                    newValues: $new_values,
                    recordId: $record_id,
                    recordType: $record_type,
                    method: $method
                );
            }

            if ($model->isDirty('status')) {
                $attributes = $model->getAttributes();
                $helper = new Helper();
                $action_by = auth()->id();
                $id = $attributes['id'];
                $status = $attributes['status'];
                $driver_id = $attributes['driver_id'];
                $vehicle_id = $attributes['vehicle_id'];

                if ($status == BatchStatusEnum::ENDED) {
                    $delivery_batch_empty_bag_collections = $helper->getDeliveryBatchBagCollection($id);
                    // ----- On completion of delivery batch update collected bags on bags timeline 
                    foreach ($delivery_batch_empty_bag_collections as $single_bag) {
                        $single_bag_delivery = $helper->getDelivery($single_bag->empty_bag_collection_delivery_id);
                        // * If picked bag have food 
                        if ($single_bag_delivery->status == DeliveryStatusEnum::CANCELED || $single_bag_delivery->status == DeliveryStatusEnum::RESCHEDULED) {
                            $description = "Delivery Batch Completed. Bag with delivery arrived at warehouse with food as it was either resheduled or canceled";
                            $helper->bagTimeline($single_bag->bag_id, $single_bag->delivery_id, BagStatusEnum::RECEIVED_IN_WAREHOUSE_WITH_DELIVERY, $action_by, $vehicle_id, $description);
                            // * If picked bag is empty food 
                        } else {
                            $description = "Delivery Batch Completed. Empty collected bags with delivery arrived at warehouse";
                            $helper->bagTimeline($single_bag->bag_id, $single_bag->delivery_id, BagStatusEnum::RECEIVED_EMPTY_IN_WAREHOUSE, $action_by, $vehicle_id, $description);
                        }
                    }
                }
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "DeliveryService";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
        });
    }
}
