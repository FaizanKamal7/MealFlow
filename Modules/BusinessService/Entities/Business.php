<?php

namespace Modules\BusinessService\Entities;

use App\Http\Helper\Helper;
use App\Models\User;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Modules\DeliveryService\Entities\Bags;
use Illuminate\Support\Facades\Request;

class Business extends Model
{
    use HasFactory;
    use HasUuids;

    protected $fillable = [
        'name',
        'logo',
        'contract_file',
        'TRN',
        'status',
        'admin_id',
        'business_category_id',
        'is_deleted',
        'deleted_at',
        'created_at',
        'updated_at',


    ];

    public function business_users()
    {
        return $this->hasMany(BusinessUser::class);
    }

    public function business_customers()
    {
        return $this->hasMany(BusinessCustomer::class);
    }

    public function branches()
    {
        return $this->hasMany(Branch::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'admin_id');
    }

    public function business_category()
    {
        return $this->belongsTo(BusinessCategory::class, 'business_category_id');
    }
    public function bags(){
        return $this->hasMany(Bags::class);
    }

    protected static function newFactory()
    {
        return \Modules\BusinessService\Database\factories\BusinessFactory::new();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "BusinessService";
            $action = "Created";
            $subject = "New Record Created";
            $url = Request::fullUrl();
            $description = "A New Record has been created";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values = null;
            $new_values = json_encode(json_encode($model->getAttributes()));
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();

            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );
            // ------ CREATE BUSINESS WALLET WHENNEW BUSINESS IS CREATED
            $helper->createWallet($record_id);
        });

        static::updating(function ($model) {
            $changes = $model->getDirty();

            if ($changes) {
                $helper = new Helper();
                $user_id = auth()->id();
                $module_name = "BusinessService";
                $action = "Updated";
                $subject = "Record Updated";
                $url = Request::fullUrl();
                $description = "Record has been updated";
                $ip_address = Request::ip();
                $user_agent = Request::header('user-agent');
                $old_values = json_encode(json_encode($model->getOriginal()));
                $new_values = json_encode($model->getAttributes());
                $record_id = $model->id;
                $record_type = get_class($model);
                $method = Request::method();

                $helper->logActivity(
                    userId: $user_id,
                    moduleName: $module_name,
                    action: $action,
                    subject: $subject,
                    url: $url,
                    description: $description,
                    ipAddress: $ip_address,
                    userAgent: $user_agent,
                    oldValues: $old_values,
                    newValues: $new_values,
                    recordId: $record_id,
                    recordType: $record_type,
                    method: $method
                );
            }
        });

        static::deleting(function ($model) {
            $helper = new Helper();
            $user_id = auth()->id();
            $module_name = "BusinessService";
            $action = "Deleted";
            $subject = "Record Deleted";
            $url = Request::fullUrl();
            $description = "Record has been Deleted";
            $ip_address = Request::ip();
            $user_agent = Request::header('user-agent');
            $old_values =  json_encode($model->getOriginal());
            $new_values = null;
            $record_id = $model->id;
            $record_type = get_class($model);
            $method = Request::method();
            $helper->logActivity(
                userId: $user_id,
                moduleName: $module_name,
                action: $action,
                subject: $subject,
                url: $url,
                description: $description,
                ipAddress: $ip_address,
                userAgent: $user_agent,
                oldValues: $old_values,
                newValues: $new_values,
                recordId: $record_id,
                recordType: $record_type,
                method: $method
            );

            // DELETING BUSINESS WALLET WHEN BUSINESS IS DELETED
            $helper->deleteWallet($record_id);
        });

        //        static::retrieved(function ($model) {
        //            $helper = new Helper();
        //            $user_id = auth()->id();
        //            $module_name = "BusinessService";
        //            $action = "Retrieved";
        //            $subject = "Record Retrieved";
        //            $url = Request::fullUrl();
        //            $description = "Record has been retrieved";
        //            $ip_address = Request::ip();
        //            $user_agent = Request::header('user-agent');
        //            $old_values =  json_encode($model->getOriginal());
        //            $new_values = json_encode($model->getAttributes());
        //            $record_id = $model->id;
        //            $record_type = get_class($model);
        //            $method = Request::method();
        //
        //            $helper->logActivity(userId:$user_id, moduleName: $module_name, action: $action, subject: $subject,
        //                url: $url, description: $description, ipAddress: $ip_address, userAgent: $user_agent,
        //                oldValues: $old_values, newValues: $new_values, recordId: $record_id, recordType: $record_type,
        //                method: $method);
        //        });
    }
}
